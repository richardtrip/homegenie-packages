<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.UseWidget("homegenie/generic/light");

//Program.AddVirtualModules("HomeAutomation.MiLightRGBW", "Light", "homegenie/generic/colorlight", 0, 4);
Program.AddVirtualModules("HomeAutomation.MiLightWhite", "Light", "homegenie/generic/light", 0, 4);

Program.AddOption("HomeGenieMiLightAddress", "192.168.0.?", "MiLight IP Address", "text");
Program.AddOption("HomeGenieMiLightPort","8899", "MiLight UDP Port", "text");

//Program.AddFeature("HomeAutomation.MiLightRGBW", "Dimmer,Light", "MiLight.LevelFix", "Set level to 100% when switched on", "checkbox");
Program.AddFeature("HomeAutomation.MiLightWhite", "Dimmer,Light", "MiLight.LevelFix", "Set level to 100% when switched on", "checkbox");

Program.Run();
</ScriptCondition>
  <ScriptSource>#pragma warning disable 0168
  #pragma warning disable 0219
  #pragma warning disable 0414

  //   Script created by Smeghead based on and thanks to
  //      Version 0.1   30/11/2014
  // https://github.com/yasharrashedi/LimitlessLED
  // https://github.com/yasharrashedi/LimitlessLED/blob/master/Milight.php
  //  I used these entensivelly when creating this script
  //    At the moment, only RBGW lights are supported and not the White only LED lights


  var MILIGHT_IP_ADDR = "HomeGenieMiLightAddress";
var MILIGHT_PORT    = "HomeGenieMiLightPort";

Func&lt;byte, byte, bool&gt; sendCommand = (byte code, byte param) =&gt; 
{
  byte[] buffer = new byte[] { code, param, 0x55 };
  UdpClient.SendMessage(buffer); 
  return true;
};

Func&lt;int, bool&gt; sendRGBWOnCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{0x35, 0x38, 0x3d, 0x37, 0x2d};
  Program.Notify("MiLight On", zone.ToString());
  //Console.WriteLine("MiLight ************************ Zone " + zone + " Is On");
  return sendCommand(codes[zone], (byte) 0x00);
};

Func&lt;int, bool&gt; sendRGBWOffCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{0x39, 0x3b, 0x33, 0x3a, 0x36};
  Program.Notify("MiLight Off", zone.ToString());
  //Console.WriteLine("MiLight ************************ Zone " + zone + " Is Off");
  return sendCommand(codes[zone], (byte) 0x00);
};

Func&lt;int, bool&gt; sendRGBWWhiteCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{(byte) 0xC2, (byte) 0xC5, (byte) 0xC7, (byte) 0xC9, (byte) 0xCB};
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand(codes[zone], (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, int, bool&gt; sendRGBWColorCommand = (int zone, int color) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x40, (byte) color);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x4D, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoDecCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x43, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoIncCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x44, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, int, bool&gt; sendRGBWBrightnessCommand = (int zone, int brightness) =&gt; 
{
  if ( brightness &gt;= 0 &amp;&amp; brightness &lt;= 100 ) {
    int[] codes = new int[]{0x02, 0x03, 0x04, 0x05, 0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E,
                            0x0F, 0x10, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
    bool result1 = sendRGBWOnCommand(zone);
    Pause(0.11);
    int val = Math.Max(0, Math.Min(19, brightness / 5));
    bool result2 = sendCommand((byte) 0x4E, (byte) codes[val]);
    return (result1 &amp;&amp; result2);
  }
  return false;
};

Func &lt;int[], int&gt; hslToMilightColor = (int[] hsl) =&gt;                
{
  int color = (256 + 176 - (int)(hsl[0] / 360.0 * 255.0)) % 256;
  return color &amp; 0xfa;
};

Func &lt;string, int&gt; hexdec = (string h) =&gt;                
{
  h = h.Replace("x", string.Empty);
  long result = 0;
  long.TryParse(h, System.Globalization.NumberStyles.HexNumber, null, out result);
  return (int)result;
};

Func &lt;string, int[]&gt; rgbHexToIntArray = (string hexColor) =&gt; 
{
  hexColor = hexColor.Replace("#", string.Empty);
  if ( hexColor.StartsWith("0x") ) {
    hexColor = hexColor.Substring(2);
  }
  int hexColorLenghth = hexColor.Length;
  if (hexColorLenghth != 8 &amp;&amp; hexColorLenghth != 6) {
    return new int[] {0,0,0};
  }
  int r,g,b;
  if (hexColorLenghth == 8) {
    r = hexdec(hexColor.Substring(2, 2));
    g = hexdec(hexColor.Substring(4, 2));
    b = hexdec(hexColor.Substring(6, 2));
    if ((r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) || (r == 255 &amp;&amp; g == 255 &amp;&amp; b == 255)) {
      return new int[] {0,0,0};
    }
    return new int[]{r, g, b};
  }
  r = hexdec(hexColor.Substring(0, 2));
  g = hexdec(hexColor.Substring(2, 2));
  b = hexdec(hexColor.Substring(4, 2));
  if ((r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) || (r == 255 &amp;&amp; g == 255 &amp;&amp; b == 255)) {
    return new int[] {0,0,0};
  }
  return new int[]{r, g, b};
};

Func &lt;int, int, int, int[]&gt; rgbToHsl = (int r, int g, int b) =&gt;                
{
  r = r / 255;
  g = g / 255;
  b = b / 255;
  int max = Math.Max(r, Math.Max(g, b));
  int min = Math.Min(r, Math.Min(g, b));
  int l = (max + min) / 2;
  int d = max - min;
  int h = 0;
  int s = 0;
  if (d == 0) {
    h = s = 0;
  }
  else {
    s = d / (1 - Math.Abs(2 * l - 1));
    if ( max == r ) {
      h = 60 * (((g - b) / d) % 6);
      if (b &gt; g) {
        h += 360;
      }         
    }
    else if (max == g) {
      h = 60 * ((b - r) / d + 2);
    }
    else {
      h = 60 * ((r - g) / d + 4);
    }
  }
  return new int[] {h, s, l};
};

Func &lt;int, int[], bool&gt; sendRGBWSetColorHsv = (int zone, int[] hsvColor) =&gt; 
{
  int milightColor = hslToMilightColor(hsvColor);
  int brightness = (hsvColor[2] * 100) / 250;
  //Console.WriteLine("       MiLight Color " + milightColor + "    brightness " + brightness);
  Pause(0.11);
  sendRGBWBrightnessCommand (zone,  brightness);
  Pause(0.11);
  return sendRGBWColorCommand (zone, milightColor); //$this-&gt;sendCommand(array(0x40, $milightColor));
};

Func &lt;int, string, bool&gt; sendRGBWSetColorHexString = (int zone, string color) =&gt; 
  //public function rgbwSetColorHexString($color)
{
  int[] rgb = rgbHexToIntArray(color);
  int[] hsl = rgbToHsl(rgb[0], rgb[1], rgb[2]);
  int milightColor = hslToMilightColor(hsl);
  return sendRGBWColorCommand (zone, milightColor);
};

When.WebServiceCallReceived("HomeAutomation.MiLight", ( args ) =&gt; {
  //Console.WriteLine("MiLight ************************ WebServiceCallReceived");
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    string parameter = ""; 
    if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
	var milightModules = Modules.InDomain("HomeAutomation.MiLightRGBW");
    var module = milightModules.WithAddress(lightnumber).Get();

    //Console.WriteLine("module name " + module.Instance.Name);
    //

    //Console.WriteLine("MiLight ************************ Command "+ command);
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
      case "Control.On":
      sendRGBWOnCommand(Convert.ToInt32(lightnumber));
      Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
      case "Control.Off":
      sendRGBWOffCommand(Convert.ToInt32(lightnumber));
      Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
      break;
      case "Control.Toggle":
      if (module.Parameter("Status.Level").DecimalValue == 0)
      {
        sendRGBWOnCommand(Convert.ToInt32(lightnumber));
        Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
      }
      else
      {
        sendRGBWOffCommand(Convert.ToInt32(lightnumber));
        Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
      }
      break;
      case "Control.Level":
      int brightness = (int)(double.Parse(parameter));
      sendRGBWBrightnessCommand (Convert.ToInt32(lightnumber),  brightness);
      //bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString() + " }");
      //Console.WriteLine("MiLight ************************ brightness "+ brightness);
      Program.RaiseEvent(module, "Status.Level", brightness.ToString(), "MiLight Light");
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
      string[] values = parameter.Split(',');
      double transition = 5;
      //if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
      int[] hsbColor = new int[] { (int)(double.Parse(values[0]) * 255), (int)(double.Parse(values[1]) * 255), (int)(double.Parse(values[2]) * 255) };
      //Console.WriteLine("       Color HSB " + hsbColor[0] + " : " + hsbColor[1] + " : " + hsbColor[2] );
      sendRGBWSetColorHsv(Convert.ToInt32(lightnumber), hsbColor);
      double levelHsb = hsbColor[2] / 250.0;
      Program.RaiseEvent(module, "Status.Level", levelHsb.ToString(), "MiLight Light");
      Program.RaiseEvent(module, "Status.ColorHsb", parameter, "MiLight Light");
      break; 
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 
    Program.Notify("MiLight ERROR!", e.Message);
  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

while (Program.IsEnabled)
{
  string addr = Program.Option(MILIGHT_IP_ADDR).Value;
  string port = Program.Option(MILIGHT_PORT).Value; 

  if (!UdpClient.IsConnected) 
  {
    if (!String.IsNullOrWhiteSpace(addr) &amp;&amp; !addr.EndsWith("?") &amp;&amp; !String.IsNullOrWhiteSpace(port))
    {
      UdpClient.Sender(addr, Convert.ToInt32(port));
    }
    else
    {
      Program.Notify("MiLight", "Please configure a valid address and port.");
    }
  } 
  Pause(5);
}


</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>28</Address>
  <Name>MiLight Control</Name>
  <Description>MiLight and EasyBulb Lights</Description>
  <Group>Devices and Things</Group>
  <Features>
    <ProgramFeature>
      <FieldType>checkbox</FieldType>
      <ForDomains>HomeAutomation.MiLightRGBW</ForDomains>
      <ForTypes>Dimmer,Light</ForTypes>
      <Property>MiLight.LevelFix</Property>
      <Description>Set level to 100% when switched on</Description>
    </ProgramFeature>
  </Features>
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>
